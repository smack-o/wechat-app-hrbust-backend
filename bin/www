#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http')
const mongoose = require('mongoose')
const debug = require('debug')('hrbust-backend:server')
const redis = require('redis')
const { mongodb } = require('../utils')
const { port } = require('../config/config')
const app = require('../app')

/**
 * Create HTTP server.
 */

const server = http.createServer(app.callback())

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      debug(`${bind} requires elevated privileges`)
      process.exit(1)
      break
    case 'EADDRINUSE':
      debug(`${bind} is already in use`)
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? addr
    : addr.port
  debug(`Listening on http://localhost:${bind}`)
}
/**
 * 处理错误
 */
function debugEr (er) {
  debug(`find an error : ${er}`)
}
/**
 * Listen on provided port, on all network interfaces.
 */

mongoose.Promise = global.Promise
mongoose
  .connect(mongodb, { useNewUrlParser: true })
  .then(() => {
    server.listen(port)
    server.on('error', onError)
    server.on('listening', onListening)
    debug('server process starting')
  })
  .catch(debugEr)

const redisClient = redis.createClient()

// if you'd like to select database 3, instead of 0 (default), call
// client.select(3, function() { /* ... */ });

redisClient.on('error', (err) => {
  console.log(`Error${err}`)
})
